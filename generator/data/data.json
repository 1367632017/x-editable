{
    "project": {},
    "files": {
        "..\\lib\\src\\containers\\editable-container.js": {
            "name": "..\\lib\\src\\containers\\editable-container.js",
            "modules": {},
            "classes": {
                "editableContainer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\containers\\editable-inline.js": {
            "name": "..\\lib\\src\\containers\\editable-inline.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\containers\\editable-popover.js": {
            "name": "..\\lib\\src\\containers\\editable-popover.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\containers\\editable-poshytip.js": {
            "name": "..\\lib\\src\\containers\\editable-poshytip.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\containers\\editable-tooltip.js": {
            "name": "..\\lib\\src\\containers\\editable-tooltip.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\editable-form\\editable-form-utils.js": {
            "name": "..\\lib\\src\\editable-form\\editable-form-utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\editable-form\\editable-form.js": {
            "name": "..\\lib\\src\\editable-form\\editable-form.js",
            "modules": {},
            "classes": {
                "editableform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\element\\editable-element.js": {
            "name": "..\\lib\\src\\element\\editable-element.js",
            "modules": {},
            "classes": {
                "editable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\date\\date.js": {
            "name": "..\\lib\\src\\inputs\\date\\date.js",
            "modules": {},
            "classes": {
                "date": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\date\\datefield.js": {
            "name": "..\\lib\\src\\inputs\\date\\datefield.js",
            "modules": {},
            "classes": {
                "datefield": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\dateui\\dateui.js": {
            "name": "..\\lib\\src\\inputs\\dateui\\dateui.js",
            "modules": {},
            "classes": {
                "dateui": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\dateui\\dateuifield.js": {
            "name": "..\\lib\\src\\inputs\\dateui\\dateuifield.js",
            "modules": {},
            "classes": {
                "dateuifield": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\wysihtml5\\wysihtml5.js": {
            "name": "..\\lib\\src\\inputs\\wysihtml5\\wysihtml5.js",
            "modules": {},
            "classes": {
                "wysihtml5": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\abstract.js": {
            "name": "..\\lib\\src\\inputs\\abstract.js",
            "modules": {},
            "classes": {
                "abstractinput": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\checklist.js": {
            "name": "..\\lib\\src\\inputs\\checklist.js",
            "modules": {},
            "classes": {
                "checklist": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\html5types.js": {
            "name": "..\\lib\\src\\inputs\\html5types.js",
            "modules": {},
            "classes": {
                "html5types": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\list.js": {
            "name": "..\\lib\\src\\inputs\\list.js",
            "modules": {},
            "classes": {
                "list": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\select.js": {
            "name": "..\\lib\\src\\inputs\\select.js",
            "modules": {},
            "classes": {
                "select": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\text.js": {
            "name": "..\\lib\\src\\inputs\\text.js",
            "modules": {},
            "classes": {
                "text": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\lib\\src\\inputs\\textarea.js": {
            "name": "..\\lib\\src\\inputs\\textarea.js",
            "modules": {},
            "classes": {
                "textarea": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "editableContainer": {
            "name": "editableContainer",
            "shortname": "editableContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "editable"
            ],
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 1,
            "description": "Attaches stand-alone container with editable-form to HTML element. Element is used only for positioning, value is not stored anywhere.<br>\nThis method applied internally in <code>$().editable()</code>. You should subscribe on it's events (save / cancel) to get profit of it.<br>\nFinal realization can be different: bootstrap-popover, jqueryui-tooltip, poshytip, inline-div. It depends on which js file you include.<br>\nApplied as jQuery method.",
            "uses": [
                "editableform"
            ]
        },
        "editableform": {
            "name": "editableform",
            "shortname": "editableform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "editableContainer"
            ],
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 1,
            "description": "Form with single input element, two buttons and two states: normal/loading.\nApplied as jQuery method to DIV tag (not to form tag!). This is because form can be in loading state when spinner shown.\nEditableform is linked with one of input types, e.g. 'text', 'select' etc.",
            "uses": [
                "text",
                "textarea"
            ]
        },
        "editable": {
            "name": "editable",
            "shortname": "editable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 1,
            "description": "Makes editable any HTML element on the page. Applied as jQuery method.",
            "uses": [
                "editableContainer"
            ]
        },
        "date": {
            "name": "date",
            "shortname": "date",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\date\\date.js",
            "line": 1,
            "description": "Bootstrap-datepicker.  \nDescription and examples: https://github.com/eternicode/bootstrap-datepicker.  \nFor **i18n** you should include js file from here: https://github.com/eternicode/bootstrap-datepicker/tree/master/js/locales\nand set `language` option.",
            "extends": "abstractinput",
            "final": 1,
            "example": [
                "\n<a href=\"#\" id=\"dob\" data-type=\"date\" data-pk=\"1\" data-url=\"/post\" data-original-title=\"Select date\">15/05/1984</a>\n<script>\n$(function(){\n    $('#dob').editable({\n        format: 'yyyy-mm-dd',    \n        viewformat: 'dd/mm/yyyy',    \n        datepicker: {\n                weekStart: 1\n           }\n        }\n    });\n});\n</script>"
            ]
        },
        "datefield": {
            "name": "datefield",
            "shortname": "datefield",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\date\\datefield.js",
            "line": 1,
            "description": "Bootstrap datefield input - modification for inline mode.\nShows normal <input type=\"text\"> and binds popup datepicker.  \nAutomatically shown in inline mode.",
            "extends": "date",
            "since": "1.4.0"
        },
        "dateui": {
            "name": "dateui",
            "shortname": "dateui",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\dateui\\dateui.js",
            "line": 1,
            "description": "jQuery UI Datepicker.  \nDescription and examples: http://jqueryui.com/datepicker.   \nThis input is also accessible as **date** type. Do not use it together with __bootstrap-datepicker__ as both apply <code>$().datepicker()</code> method.  \nFor **i18n** you should include js file from here: https://github.com/jquery/jquery-ui/tree/master/ui/i18n.",
            "extends": "abstractinput",
            "final": 1,
            "example": [
                "\n<a href=\"#\" id=\"dob\" data-type=\"date\" data-pk=\"1\" data-url=\"/post\" data-original-title=\"Select date\">15/05/1984</a>\n<script>\n$(function(){\n    $('#dob').editable({\n        format: 'yyyy-mm-dd',    \n        viewformat: 'dd/mm/yyyy',    \n        datepicker: {\n                firstDay: 1\n           }\n        }\n    });\n});\n</script>"
            ]
        },
        "dateuifield": {
            "name": "dateuifield",
            "shortname": "dateuifield",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\dateui\\dateuifield.js",
            "line": 1,
            "description": "jQuery UI datefield input - modification for inline mode.\nShows normal <input type=\"text\"> and binds popup datepicker.  \nAutomatically shown in inline mode.",
            "extends": "dateui",
            "since": "1.4.0"
        },
        "wysihtml5": {
            "name": "wysihtml5",
            "shortname": "wysihtml5",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\wysihtml5\\wysihtml5.js",
            "line": 1,
            "description": "Bootstrap wysihtml5 editor.   \nTo use it you should **manually** include required js and css files.\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/bootstrap-wysihtml5.css\"></link>  \n    <script src=\"js/wysihtml5-0.3.0.js\"></script>  \n    <script src=\"js/bootstrap-wysihtml5.js\"></script>  \n\nYou can download these files from https://github.com/jhollingworth/bootstrap-wysihtml5",
            "extends": "abstractinput",
            "final": 1,
            "since": "1.4.0",
            "example": [
                "\n<div id=\"comments\" data-type=\"wysihtml5\" data-pk=\"1\"><h2>awesome</h2> comment!</div>\n<script>\n$(function(){\n    $('#comments').editable({\n        url: '/post',\n        title: 'Enter comments'\n    });\n});\n</script>"
            ]
        },
        "abstractinput": {
            "name": "abstractinput",
            "shortname": "abstractinput",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 1,
            "description": "AbstractInput - base class for all editable inputs.\nIt defines interface to be implemented by any input type.\nTo create your own input you can inherit from this class."
        },
        "checklist": {
            "name": "checklist",
            "shortname": "checklist",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\checklist.js",
            "line": 1,
            "description": "List of checkboxes. \nInternally value stored as javascript array of values.",
            "extends": "list",
            "final": 1,
            "example": [
                "\n<a href=\"#\" id=\"options\" data-type=\"checklist\" data-pk=\"1\" data-url=\"/post\" data-original-title=\"Select options\"></a>\n<script>\n$(function(){\n    $('#options').editable({\n        value: [2, 3],    \n        source: [\n              {value: 1, text: 'option1'},\n              {value: 2, text: 'option2'},\n              {value: 3, text: 'option3'}\n           ]\n        }\n    });\n});\n</script>"
            ]
        },
        "html5types": {
            "name": "html5types",
            "shortname": "html5types",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\html5types.js",
            "line": 1,
            "description": "HTML5 input types.\nFollowing types are supported:\n\n* password\n* email\n* url\n* tel\n* number\n* range\n\nLearn more about html5 inputs:  \nhttp://www.w3.org/wiki/HTML5_form_additions  \nTo check browser compatibility please see:  \nhttps://developer.mozilla.org/en-US/docs/HTML/Element/Input",
            "extends": "text",
            "final": 1,
            "since": "1.3.0",
            "example": [
                "\n<a href=\"#\" id=\"email\" data-type=\"email\" data-pk=\"1\">admin@example.com</a>\n<script>\n$(function(){\n    $('#email').editable({\n        url: '/post',\n        title: 'Enter email'\n    });\n});\n</script>"
            ]
        },
        "list": {
            "name": "list",
            "shortname": "list",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\list.js",
            "line": 1,
            "description": "List - abstract class for inputs that have source option loaded from js array or via ajax",
            "extends": "abstractinput"
        },
        "select": {
            "name": "select",
            "shortname": "select",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\lib\\src\\inputs\\select.js",
            "line": 1,
            "description": "Select (dropdown)",
            "extends": "list",
            "final": 1,
            "example": [
                "\n<a href=\"#\" id=\"status\" data-type=\"select\" data-pk=\"1\" data-url=\"/post\" data-original-title=\"Select status\"></a>\n<script>\n$(function(){\n    $('#status').editable({\n        value: 2,    \n        source: [\n              {value: 1, text: 'Active'},\n              {value: 2, text: 'Blocked'},\n              {value: 3, text: 'Deleted'}\n           ]\n        }\n    });\n});\n</script>"
            ]
        },
        "text": {
            "name": "text",
            "shortname": "text",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "editableform"
            ],
            "file": "..\\lib\\src\\inputs\\text.js",
            "line": 1,
            "description": "Text input",
            "extends": "abstractinput",
            "final": 1,
            "example": [
                "\n<a href=\"#\" id=\"username\" data-type=\"text\" data-pk=\"1\">awesome</a>\n<script>\n$(function(){\n    $('#username').editable({\n        url: '/post',\n        title: 'Enter username'\n    });\n});\n</script>"
            ]
        },
        "textarea": {
            "name": "textarea",
            "shortname": "textarea",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "editableform"
            ],
            "file": "..\\lib\\src\\inputs\\textarea.js",
            "line": 1,
            "description": "Textarea input",
            "extends": "abstractinput",
            "final": 1,
            "example": [
                "\n<a href=\"#\" id=\"comments\" data-type=\"textarea\" data-pk=\"1\">awesome comment!</a>\n<script>\n$(function(){\n    $('#comments').editable({\n        url: '/post',\n        title: 'Enter comments'\n    });\n});\n</script>"
            ]
        }
    },
    "classitems": [
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 99,
            "description": "Fired when container is shown and form is rendered (for select will wait for loading dropdown options)",
            "itemtype": "event",
            "name": "shown",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                }
            ],
            "example": [
                "\n$('#username').on('shown', function() {\n     var $tip = $(this).data('editableContainer').tip();\n     $tip.find('input').val('overwriting value of input..');\n});                     "
            ],
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 132,
            "description": "Shows container with form",
            "itemtype": "method",
            "name": "show()",
            "params": [
                {
                    "name": "closeAll",
                    "description": "Whether to close all other editable containers when showing this one. Default true.",
                    "type": "Boolean"
                }
            ],
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 156,
            "description": "Hides container with form",
            "itemtype": "method",
            "name": "hide()",
            "params": [
                {
                    "name": "reason",
                    "description": "Reason caused hiding. Can be <code>save|cancel|onblur|nochange|undefined (=manual)</code>",
                    "type": "String"
                }
            ],
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 167,
            "description": "Fired when container was hidden. It occurs on both save or cancel.",
            "itemtype": "event",
            "name": "hidden",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                },
                {
                    "name": "reason",
                    "description": "Reason caused hiding. Can be <code>save|cancel|onblur|nochange|undefined (=manual)</code>",
                    "type": "String"
                }
            ],
            "example": [
                "\n$('#username').on('hidden', function(e, reason) {\n    if(reason === 'save' || reason === 'cancel') {\n        //auto-open next editable\n        $(this).closest('tr').next().find('.editable').editable('show');\n    } \n});            "
            ],
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 189,
            "description": "Toggles container visibility (show / hide)",
            "itemtype": "method",
            "name": "toggle()",
            "params": [
                {
                    "name": "closeAll",
                    "description": "Whether to close all other editable containers when showing this one. Default true.",
                    "type": "Boolean"
                }
            ],
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 212,
            "description": "Fired when new value was submitted. You can use <code>$(this).data('editableContainer')</code> inside handler to access to editableContainer instance",
            "itemtype": "event",
            "name": "save",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "additional params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "newValue",
                            "description": "submitted value",
                            "type": "Mixed"
                        },
                        {
                            "name": "response",
                            "description": "ajax response",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "example": [
                "\n$('#username').on('save', function(e, params) {\n    //assuming server response: '{success: true}'\n    var pk = $(this).data('editableContainer').options.pk;\n    if(params.response && params.response.success) {\n        alert('value: ' + params.newValue + ' with pk: ' + pk + ' saved!');\n    } else {\n        alert('error!'); \n    } \n});"
            ],
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 234,
            "description": "Sets new option",
            "itemtype": "method",
            "name": "option(key, value)",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 258,
            "description": "Destroys the container instance",
            "itemtype": "method",
            "name": "destroy()",
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 294,
            "description": "Activates input of visible container (e.g. set focus)",
            "itemtype": "method",
            "name": "activate()",
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 306,
            "description": "jQuery method to initialize editableContainer.",
            "itemtype": "method",
            "name": "$().editableContainer(options)",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n$('#edit').editableContainer({\n    type: 'text',\n    url: '/post',\n    pk: 1,\n    value: 'hello'\n});"
            ],
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 344,
            "description": "Initial value of form input",
            "itemtype": "property",
            "name": "value",
            "type": "mixed",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 353,
            "description": "Placement of container relative to element. Can be <code>top|right|bottom|left</code>. Not used for inline container.",
            "itemtype": "property",
            "name": "placement",
            "type": "string",
            "default": "'top'",
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 361,
            "description": "Whether to hide container on save/cancel.",
            "itemtype": "property",
            "name": "autohide",
            "type": "boolean",
            "default": "true",
            "access": "private",
            "tagname": "",
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 370,
            "description": "Action when user clicks outside the container. Can be <code>cancel|submit|ignore</code>.  \nSetting <code>ignore</code> allows to have several containers open.",
            "itemtype": "property",
            "name": "onblur",
            "type": "string",
            "default": "'cancel'",
            "since": "1.1.1",
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 381,
            "description": "Animation speed (inline mode)",
            "itemtype": "property",
            "name": "anim",
            "type": "string",
            "default": "'fast'",
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-container.js",
            "line": 389,
            "description": "Mode of editable, can be `popup` or `inline`",
            "itemtype": "property",
            "name": "mode",
            "type": "string",
            "default": "'popup'",
            "since": "1.4.0",
            "class": "editableContainer"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-inline.js",
            "line": 1,
            "description": "Editable Inline \n---------------------",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-popover.js",
            "line": 1,
            "description": "Editable Popover \n---------------------\nrequires bootstrap-popover.js",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-popover.js",
            "line": 27,
            "description": "move popover to new position. This function mainly copied from bootstrap-popover.",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-poshytip.js",
            "line": 1,
            "description": "Editable Poshytip \n---------------------\nrequires jquery.poshytip.js",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-poshytip.js",
            "line": 82,
            "description": "Poshytip fix: disable incorrect table display\nsee https://github.com/vadikom/poshytip/issues/7",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\containers\\editable-tooltip.js",
            "line": 1,
            "description": "Editable jQuery UI Tooltip \n---------------------\nrequires jquery ui 1.9.x",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form-utils.js",
            "line": 1,
            "description": "EditableForm utilites",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form-utils.js",
            "line": 7,
            "description": "classic JS inheritance function",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form-utils.js",
            "line": 18,
            "description": "set caret position in input\nsee http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form-utils.js",
            "line": 34,
            "description": "function to parse JSON in *single* quotes. (jquery automatically parse only double quotes)\nThat allows such code as: <a data-source=\"{'a': 'b', 'c': 'd'}\">\nsafe = true --> means no exception will be thrown\nfor details see http://stackoverflow.com/questions/7410348/how-to-set-json-format-to-html5-data-attributes-in-the-jquery",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form-utils.js",
            "line": 59,
            "description": "slice object by specified keys",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form-utils.js",
            "line": 91,
            "description": "exclude complex objects from $.data() before pass to config",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form-utils.js",
            "line": 122,
            "description": "method to escape html.",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 39,
            "description": "Renders editableform",
            "itemtype": "method",
            "name": "render",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 57,
            "description": "Fired when rendering starts",
            "itemtype": "event",
            "name": "rendering",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                }
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 99,
            "description": "Fired when form is rendered",
            "itemtype": "event",
            "name": "rendered",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                }
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 115,
            "description": "Fired when form was cancelled by user",
            "itemtype": "event",
            "name": "cancel",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                }
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 151,
            "description": "Fired when form is shown",
            "itemtype": "event",
            "name": "show",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                }
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 199,
            "description": "Fired when value not changed but form is submitted. Requires savenochange = false.",
            "itemtype": "event",
            "name": "nochange",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                }
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 236,
            "description": "Fired when form is submitted",
            "itemtype": "event",
            "name": "save",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "additional params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "newValue",
                            "description": "submitted value",
                            "type": "Mixed"
                        },
                        {
                            "name": "response",
                            "description": "ajax response",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "example": [
                "\n$('#form-div').on('save'), function(e, params){\n    if(params.newValue === 'username') {...}\n});                    "
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 364,
            "description": "Type of input. Can be <code>text|textarea|select|date|checklist</code>",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "'text'",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 372,
            "description": "Url for submit, e.g. <code>'/post'</code>  \nIf function - it will be called instead of ajax. Function can return deferred object to run fail/done callbacks.",
            "itemtype": "property",
            "name": "url",
            "type": "string|function",
            "default": "null",
            "example": [
                "\nurl: function(params) {\n    if(params.value === 'abc') {\n        var d = new $.Deferred;\n        return d.reject('error message'); //returning error via deferred object\n    } else {\n        someModel.set(params.name, params.value); //save data in some js model\n    }\n} "
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 390,
            "description": "Additional params for submit. If defined as <code>object</code> - it is **appended** to original ajax data (pk, name and value).  \nIf defined as <code>function</code> - returned object **overwrites** original ajax data.",
            "example": [
                "\nparams: function(params) {\n    //originally params contain pk, name and value\n    params.a = 1;\n    return params;\n}"
            ],
            "itemtype": "property",
            "name": "params",
            "type": "object|function",
            "default": "null",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 405,
            "description": "Name of field. Will be submitted on server. Can be taken from <code>id</code> attribute",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "null",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 413,
            "description": "Primary key of editable object (e.g. record id in database). For composite keys use object, e.g. <code>{id: 1, lang: 'en'}</code>.\nCan be calculated dynamically via function.",
            "itemtype": "property",
            "name": "pk",
            "type": "string|object|function",
            "default": "null",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 422,
            "description": "Initial value. If not defined - will be taken from element's content.\nFor __select__ type should be defined (as it is ID of shown text).",
            "itemtype": "property",
            "name": "value",
            "type": "string|object",
            "default": "null",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 431,
            "description": "Strategy for sending data on server. Can be <code>auto|always|never</code>.\nWhen 'auto' data will be sent on server only if pk defined, otherwise new value will be stored in element.",
            "itemtype": "property",
            "name": "send",
            "type": "string",
            "default": "'auto'",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 440,
            "description": "Function for client-side validation. If returns string - means validation not passed and string showed as error.",
            "itemtype": "property",
            "name": "validate",
            "type": "function",
            "default": "null",
            "example": [
                "\nvalidate: function(value) {\n    if($.trim(value) == '') {\n        return 'This field is required';\n    }\n}"
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 454,
            "description": "Success callback. Called when value successfully sent on server and **response status = 200**.  \nUseful to work with json response. For example, if your backend response can be <code>{success: true}</code>\nor <code>{success: false, msg: \"server error\"}</code> you can check it inside this callback.  \nIf it returns **string** - means error occured and string is shown as error message.  \nIf it returns **object like** <code>{newValue: &lt;something&gt;}</code> - it overwrites value, submitted by user.  \nOtherwise newValue simply rendered into element.",
            "itemtype": "property",
            "name": "success",
            "type": "function",
            "default": "null",
            "example": [
                "\nsuccess: function(response, newValue) {\n    if(!response.success) return response.msg;\n}"
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 471,
            "description": "Additional options for ajax request.\nList of values: http://api.jquery.com/jQuery.ajax",
            "itemtype": "property",
            "name": "ajaxOptions",
            "type": "object",
            "default": "null",
            "since": "1.1.1",
            "example": [
                " \najaxOptions: {\n    type: 'put',\n    dataType: 'json'\n}        "
            ],
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 486,
            "description": "Whether to show buttons or not.  \nForm without buttons is auto-submitted.",
            "itemtype": "property",
            "name": "showbuttons",
            "type": "boolean",
            "default": "true",
            "since": "1.1.1",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 496,
            "description": "Scope for callback methods (success, validate).  \nIf <code>null</code> means editableform instance itself.",
            "itemtype": "property",
            "name": "scope",
            "type": "DOMElement|object",
            "default": "null",
            "since": "1.2.0",
            "access": "private",
            "tagname": "",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\editable-form\\editable-form.js",
            "line": 507,
            "description": "Whether to save or cancel value when it was not changed but form was submitted",
            "itemtype": "property",
            "name": "savenochange",
            "type": "boolean",
            "default": "false",
            "since": "1.2.0",
            "class": "editableform"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 82,
            "description": "Fired when element was initialized by editable method.",
            "itemtype": "event",
            "name": "init",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                },
                {
                    "name": "editable",
                    "description": "editable instance (as here it cannot accessed via data('editable'))",
                    "type": "Object"
                }
            ],
            "since": "1.2.0",
            "example": [
                "\n$('#username').on('init', function(e, editable) {\n    alert('initialized ' + editable.options.name);\n});"
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 123,
            "description": "Enables editable",
            "itemtype": "method",
            "name": "enable()",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 138,
            "description": "Disables editable",
            "itemtype": "method",
            "name": "disable()",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 151,
            "description": "Toggles enabled / disabled state of editable element",
            "itemtype": "method",
            "name": "toggleDisabled()",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 163,
            "description": "Sets new option",
            "itemtype": "method",
            "name": "option(key, value)",
            "params": [
                {
                    "name": "key",
                    "description": "option name or object with several options",
                    "type": "String|object"
                },
                {
                    "name": "value",
                    "description": "option new value",
                    "type": "Mixed"
                }
            ],
            "example": [
                "\n$('.editable').editable('option', 'pk', 2);"
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 231,
            "description": "Shows container with form",
            "itemtype": "method",
            "name": "show()",
            "params": [
                {
                    "name": "closeAll",
                    "description": "Whether to close all other editable containers when showing this one. Default true.",
                    "type": "Boolean"
                }
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 257,
            "description": "Hides container with form",
            "itemtype": "method",
            "name": "hide()",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 267,
            "description": "Toggles container visibility (show / hide)",
            "itemtype": "method",
            "name": "toggle()",
            "params": [
                {
                    "name": "closeAll",
                    "description": "Whether to close all other editable containers when showing this one. Default true.",
                    "type": "Boolean"
                }
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 293,
            "description": "Fired when new value was submitted. You can use <code>$(this).data('editable')</code> to access to editable instance",
            "itemtype": "event",
            "name": "save",
            "params": [
                {
                    "name": "event",
                    "description": "event object",
                    "type": "Object"
                },
                {
                    "name": "params",
                    "description": "additional params",
                    "type": "Object",
                    "props": [
                        {
                            "name": "newValue",
                            "description": "submitted value",
                            "type": "Mixed"
                        },
                        {
                            "name": "response",
                            "description": "ajax response",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "example": [
                "\n$('#username').on('save', function(e, params) {\n    alert('Saved value: ' + params.newValue);\n});"
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 315,
            "description": "Sets new value of editable",
            "itemtype": "method",
            "name": "setValue(value, convertStr)",
            "params": [
                {
                    "name": "value",
                    "description": "new value",
                    "type": "Mixed"
                },
                {
                    "name": "convertStr",
                    "description": "whether to convert value from string to internal format",
                    "type": "Boolean"
                }
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 336,
            "description": "Activates input of visible container (e.g. set focus)",
            "itemtype": "method",
            "name": "activate()",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 350,
            "description": "jQuery method to initialize editable element.",
            "itemtype": "method",
            "name": "$().editable(options)",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "example": [
                "\n$('#username').editable({\n    type: 'text',\n    url: '/post',\n    pk: 1\n});"
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 366,
            "description": "Runs client-side validation for all matched editables",
            "itemtype": "method",
            "name": "validate()",
            "return": {
                "description": "validation errors map",
                "type": "Object"
            },
            "example": [
                "\n$('#username, #fullname').editable('validate');\n// possible result:\n{\n  username: \"username is required\",\n  fullname: \"fullname should be minimum 3 letters length\"\n}"
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 388,
            "description": "Returns current values of editable elements. If value is <code>null</code> or <code>undefined</code> it will not be returned",
            "itemtype": "method",
            "name": "getValue()",
            "return": {
                "description": "object of element names and values",
                "type": "Object"
            },
            "example": [
                "\n$('#username, #fullname').editable('validate');\n// possible result:\n{\nusername: \"superuser\",\nfullname: \"John\"\n}"
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 409,
            "description": "This method collects values from several editable elements and submit them all to server.   \nInternally it runs client-side validation for all fields and submits only in case of success.  \nSee <a href=\"#newrecord\">creating new records</a> for details.",
            "itemtype": "method",
            "name": "submit(options)",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "url",
                            "description": "url to submit data",
                            "type": "Object"
                        },
                        {
                            "name": "data",
                            "description": "additional data to submit",
                            "type": "Object"
                        },
                        {
                            "name": "ajaxOptions",
                            "description": "additional ajax options",
                            "type": "Object"
                        },
                        {
                            "name": "error(obj)",
                            "description": "error handler",
                            "type": "Function"
                        },
                        {
                            "name": "success(obj,config)",
                            "description": "success handler",
                            "type": "Function"
                        }
                    ]
                }
            ],
            "return": {
                "description": "jQuery object",
                "type": "Object"
            },
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 477,
            "description": "Type of input. Can be <code>text|textarea|select|date|checklist</code> and more",
            "itemtype": "property",
            "name": "type",
            "type": "string",
            "default": "'text'",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 485,
            "description": "Sets disabled state of editable",
            "itemtype": "property",
            "name": "disabled",
            "type": "boolean",
            "default": "false",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 493,
            "description": "How to toggle editable. Can be <code>click|dblclick|mouseenter|manual</code>.   \nWhen set to <code>manual</code> you should manually call <code>show/hide</code> methods of editable.    \n**Note**: if you call <code>show</code> or <code>toggle</code> inside **click** handler of some DOM element, \nyou need to apply <code>e.stopPropagation()</code> because containers are being closed on any click on document.",
            "example": [
                "\n$('#edit-button').click(function(e) {\n    e.stopPropagation();\n    $('#username').editable('toggle');\n});"
            ],
            "itemtype": "property",
            "name": "toggle",
            "type": "string",
            "default": "'click'",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 510,
            "description": "Text shown when element is empty.",
            "itemtype": "property",
            "name": "emptytext",
            "type": "string",
            "default": "'Empty'",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 518,
            "description": "Allows to automatically set element's text based on it's value. Can be <code>auto|always|never</code>. Useful for select and date.\nFor example, if dropdown list is <code>{1: 'a', 2: 'b'}</code> and element's value set to <code>1</code>, it's html will be automatically set to <code>'a'</code>.  \n<code>auto</code> - text will be automatically set only if element is empty.  \n<code>always|never</code> - always(never) try to set element's text.",
            "itemtype": "property",
            "name": "autotext",
            "type": "string",
            "default": "'auto'",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 529,
            "description": "Initial value of input. If not set, taken from element's text.",
            "itemtype": "property",
            "name": "value",
            "type": "mixed",
            "default": "element's text",
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\element\\editable-element.js",
            "line": 537,
            "description": "Callback to perform custom displaying of value in element's text.  \nIf `null`, default input's display used.  \nIf `false`, no displaying methods will be called, element's text will never change.  \nRuns under element's scope.  \n_Parameters:_  \n\n* `value` current value to be displayed\n* `response` server response (if display called after ajax submit), since 1.4.0\n \nFor **inputs with source** (select, checklist) parameters are different:  \n  \n* `value` current value to be displayed\n* `sourceData` array of items for current input (e.g. dropdown items) \n* `response` server response (if display called after ajax submit), since 1.4.0\n          \nTo get currently selected items use `$.fn.editableutils.itemsByValue(value, sourceData)`.",
            "itemtype": "property",
            "name": "display",
            "type": "function|boolean",
            "default": "null",
            "since": "1.2.0",
            "example": [
                "\ndisplay: function(value, sourceData) {\n   //display checklist as comma-separated values\n   var html = [],\n       checked = $.fn.editableutils.itemsByValue(value, sourceData);\n       \n   if(checked.length) {\n       $.each(checked, function(i, v) { html.push($.fn.editableutils.escape(v.text)); });\n       $(this).html(html.join(', '));\n   } else {\n       $(this).empty(); \n   }\n}"
            ],
            "class": "editable"
        },
        {
            "file": "..\\lib\\src\\inputs\\date\\date.js",
            "line": 124,
            "itemtype": "property",
            "name": "tpl",
            "default": "<div></div>",
            "class": "date"
        },
        {
            "file": "..\\lib\\src\\inputs\\date\\date.js",
            "line": 129,
            "itemtype": "property",
            "name": "inputclass",
            "default": "null",
            "class": "date"
        },
        {
            "file": "..\\lib\\src\\inputs\\date\\date.js",
            "line": 134,
            "description": "Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\nPossible tokens are: <code>d, dd, m, mm, yy, yyyy</code>",
            "itemtype": "property",
            "name": "format",
            "type": "string",
            "default": "yyyy-mm-dd",
            "class": "date"
        },
        {
            "file": "..\\lib\\src\\inputs\\date\\date.js",
            "line": 143,
            "description": "Format used for displaying date. Also applied when converting date from element's text on init.   \nIf not specified equals to <code>format</code>",
            "itemtype": "property",
            "name": "viewformat",
            "type": "string",
            "default": "null",
            "class": "date"
        },
        {
            "file": "..\\lib\\src\\inputs\\date\\date.js",
            "line": 152,
            "description": "Configuration of datepicker.\nFull list of options: http://vitalets.github.com/bootstrap-datepicker",
            "itemtype": "property",
            "name": "datepicker",
            "type": "object",
            "default": "{\n    weekStart: 0,\n    startView: 0,\n    autoclose: false\n}",
            "class": "date"
        },
        {
            "file": "..\\lib\\src\\inputs\\date\\date.js",
            "line": 169,
            "description": "Text shown as clear date button. \nIf <code>false</code> clear button will not be rendered.",
            "itemtype": "property",
            "name": "clear",
            "type": "boolean|string",
            "default": "'x clear'",
            "class": "date"
        },
        {
            "file": "..\\lib\\src\\inputs\\date\\datefield.js",
            "line": 58,
            "itemtype": "property",
            "name": "tpl",
            "class": "datefield"
        },
        {
            "file": "..\\lib\\src\\inputs\\date\\datefield.js",
            "line": 62,
            "itemtype": "property",
            "name": "inputclass",
            "default": "'input-small'",
            "class": "datefield"
        },
        {
            "file": "..\\lib\\src\\inputs\\dateui\\dateui.js",
            "line": 135,
            "itemtype": "property",
            "name": "tpl",
            "default": "<div></div>",
            "class": "dateui"
        },
        {
            "file": "..\\lib\\src\\inputs\\dateui\\dateui.js",
            "line": 140,
            "itemtype": "property",
            "name": "inputclass",
            "default": "null",
            "class": "dateui"
        },
        {
            "file": "..\\lib\\src\\inputs\\dateui\\dateui.js",
            "line": 145,
            "description": "Format used for sending value to server. Also applied when converting date from <code>data-value</code> attribute.<br>\nFull list of tokens: http://docs.jquery.com/UI/Datepicker/formatDate",
            "itemtype": "property",
            "name": "format",
            "type": "string",
            "default": "yyyy-mm-dd",
            "class": "dateui"
        },
        {
            "file": "..\\lib\\src\\inputs\\dateui\\dateui.js",
            "line": 154,
            "description": "Format used for displaying date. Also applied when converting date from element's text on init.    \nIf not specified equals to <code>format</code>",
            "itemtype": "property",
            "name": "viewformat",
            "type": "string",
            "default": "null",
            "class": "dateui"
        },
        {
            "file": "..\\lib\\src\\inputs\\dateui\\dateui.js",
            "line": 164,
            "description": "Configuration of datepicker.\nFull list of options: http://api.jqueryui.com/datepicker",
            "itemtype": "property",
            "name": "datepicker",
            "type": "object",
            "default": "{\n   firstDay: 0, \n   changeYear: true, \n   changeMonth: true\n}",
            "class": "dateui"
        },
        {
            "file": "..\\lib\\src\\inputs\\dateui\\dateui.js",
            "line": 182,
            "description": "Text shown as clear date button. \nIf <code>false</code> clear button will not be rendered.",
            "itemtype": "property",
            "name": "clear",
            "type": "boolean|string",
            "default": "'x clear'",
            "class": "dateui"
        },
        {
            "file": "..\\lib\\src\\inputs\\dateui\\dateuifield.js",
            "line": 49,
            "itemtype": "property",
            "name": "tpl",
            "default": "<input type=\"text\">",
            "class": "dateuifield"
        },
        {
            "file": "..\\lib\\src\\inputs\\dateui\\dateuifield.js",
            "line": 54,
            "itemtype": "property",
            "name": "inputclass",
            "default": "null",
            "class": "dateuifield"
        },
        {
            "file": "..\\lib\\src\\inputs\\wysihtml5\\wysihtml5.js",
            "line": 89,
            "itemtype": "property",
            "name": "tpl",
            "default": "<textarea></textarea>",
            "class": "wysihtml5"
        },
        {
            "file": "..\\lib\\src\\inputs\\wysihtml5\\wysihtml5.js",
            "line": 94,
            "itemtype": "property",
            "name": "inputclass",
            "default": "null",
            "class": "wysihtml5"
        },
        {
            "file": "..\\lib\\src\\inputs\\wysihtml5\\wysihtml5.js",
            "line": 99,
            "description": "Placeholder attribute of input. Shown when input is empty.",
            "itemtype": "property",
            "name": "placeholder",
            "type": "string",
            "default": "null",
            "class": "wysihtml5"
        },
        {
            "file": "..\\lib\\src\\inputs\\wysihtml5\\wysihtml5.js",
            "line": 107,
            "description": "Number of rows in textarea",
            "itemtype": "property",
            "name": "rows",
            "type": "integer",
            "default": "10",
            "class": "wysihtml5"
        },
        {
            "file": "..\\lib\\src\\inputs\\wysihtml5\\wysihtml5.js",
            "line": 115,
            "description": "Wysihtml5 defaut options.  \nSee https://github.com/jhollingworth/bootstrap-wysihtml5#options",
            "itemtype": "property",
            "name": "wysihtml5",
            "type": "object",
            "default": "{stylesheets: false}",
            "class": "wysihtml5"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 16,
            "description": "Initializes input",
            "itemtype": "method",
            "name": "init()",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 30,
            "description": "Renders input from tpl. Can return jQuery deferred object.\nCan be overwritten in child objects",
            "itemtype": "method",
            "name": "render()",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 40,
            "description": "Sets element's html by value.",
            "itemtype": "method",
            "name": "value2html(value, element)",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                },
                {
                    "name": "element",
                    "description": "",
                    "type": "DOMElement"
                }
            ],
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 51,
            "description": "Converts element's html to value",
            "itemtype": "method",
            "name": "html2value(html)",
            "params": [
                {
                    "name": "html",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 62,
            "description": "Converts value to string (for internal compare). For submitting to server used value2submit().",
            "itemtype": "method",
            "name": "value2str(value)",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 73,
            "description": "Converts string received from server into value. Usually from `data-value` attribute.",
            "itemtype": "method",
            "name": "str2value(str)",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 84,
            "description": "Converts value for submitting to server. Result can be string or object.",
            "itemtype": "method",
            "name": "value2submit(value)",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "",
                "type": "Mixed"
            },
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 95,
            "description": "Sets value of input.",
            "itemtype": "method",
            "name": "value2input(value)",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Mixed"
                }
            ],
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 105,
            "description": "Returns value of input. Value can be object (e.g. datepicker)",
            "itemtype": "method",
            "name": "input2value()",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 114,
            "description": "Activates input. For text it sets focus.",
            "itemtype": "method",
            "name": "activate()",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 125,
            "description": "Creates input.",
            "itemtype": "method",
            "name": "clear()",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 134,
            "description": "method to escape html.",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 141,
            "description": "attach handler to automatically submit form when value changed (useful when buttons not shown)",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 163,
            "description": "HTML template of input. Normally you should not change it.",
            "itemtype": "property",
            "name": "tpl",
            "type": "string",
            "default": "''",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 171,
            "description": "CSS class automatically applied to input",
            "itemtype": "property",
            "name": "inputclass",
            "type": "string",
            "default": "input-medium",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\abstract.js",
            "line": 179,
            "description": "Name attribute of input",
            "itemtype": "property",
            "name": "name",
            "type": "string",
            "default": "null",
            "class": "abstractinput"
        },
        {
            "file": "..\\lib\\src\\inputs\\checklist.js",
            "line": 123,
            "itemtype": "property",
            "name": "tpl",
            "default": "<div></div>",
            "class": "checklist"
        },
        {
            "file": "..\\lib\\src\\inputs\\checklist.js",
            "line": 129,
            "itemtype": "property",
            "name": "inputclass",
            "type": "string",
            "default": "null",
            "class": "checklist"
        },
        {
            "file": "..\\lib\\src\\inputs\\checklist.js",
            "line": 136,
            "description": "Separator of values when reading from 'data-value' string",
            "itemtype": "property",
            "name": "separator",
            "type": "string",
            "default": "','",
            "class": "checklist"
        },
        {
            "file": "..\\lib\\src\\inputs\\html5types.js",
            "line": 33,
            "itemtype": "property",
            "name": "tpl",
            "default": "depends on type",
            "class": "html5types"
        },
        {
            "file": "..\\lib\\src\\inputs\\list.js",
            "line": 201,
            "description": "convert data to array suitable for sourceData, e.g. [{value: 1, text: 'abc'}, {...}]",
            "class": "list"
        },
        {
            "file": "..\\lib\\src\\inputs\\list.js",
            "line": 244,
            "description": "Source data for list.  \nIf **array** - it should be in format: `[{value: 1, text: \"text1\"}, {...}]`  \nFor compability, object format is also supported: `{\"1\": \"text1\", \"2\": \"text2\" ...}` but it does not guarantee elements order.\n\nIf **string** - considered ajax url to load items. In that case results will be cached for fields with the same source and name. See also `sourceCache` option.\n  \nIf **function**, it should return data in format above (since 1.4.0).",
            "itemtype": "property",
            "name": "source",
            "type": "string | array | object | function",
            "default": "null",
            "class": "list"
        },
        {
            "file": "..\\lib\\src\\inputs\\list.js",
            "line": 258,
            "description": "Data automatically prepended to the beginning of dropdown list.",
            "itemtype": "property",
            "name": "prepend",
            "type": "string | array | object | function",
            "default": "false",
            "class": "list"
        },
        {
            "file": "..\\lib\\src\\inputs\\list.js",
            "line": 266,
            "description": "Error message when list cannot be loaded (e.g. ajax error)",
            "itemtype": "property",
            "name": "sourceError",
            "type": "string",
            "default": "Error when loading list",
            "class": "list"
        },
        {
            "file": "..\\lib\\src\\inputs\\list.js",
            "line": 274,
            "description": "if <code>true</code> and source is **string url** - results will be cached for fields with the same source and name.  \nUsefull for editable grids.",
            "itemtype": "property",
            "name": "sourceCache",
            "type": "boolean",
            "default": "true",
            "since": "1.2.0",
            "class": "list"
        },
        {
            "file": "..\\lib\\src\\inputs\\select.js",
            "line": 70,
            "itemtype": "property",
            "name": "tpl",
            "default": "<select></select>",
            "class": "select"
        },
        {
            "file": "..\\lib\\src\\inputs\\text.js",
            "line": 86,
            "itemtype": "property",
            "name": "tpl",
            "default": "<input type=\"text\">",
            "class": "text"
        },
        {
            "file": "..\\lib\\src\\inputs\\text.js",
            "line": 91,
            "description": "Placeholder attribute of input. Shown when input is empty.",
            "itemtype": "property",
            "name": "placeholder",
            "type": "string",
            "default": "null",
            "class": "text"
        },
        {
            "file": "..\\lib\\src\\inputs\\text.js",
            "line": 100,
            "description": "Whether to show `clear` button",
            "itemtype": "property",
            "name": "clear",
            "type": "boolean",
            "default": "true",
            "class": "text"
        },
        {
            "file": "..\\lib\\src\\inputs\\textarea.js",
            "line": 76,
            "itemtype": "property",
            "name": "tpl",
            "default": "<textarea></textarea>",
            "class": "textarea"
        },
        {
            "file": "..\\lib\\src\\inputs\\textarea.js",
            "line": 81,
            "itemtype": "property",
            "name": "inputclass",
            "default": "input-large",
            "class": "textarea"
        },
        {
            "file": "..\\lib\\src\\inputs\\textarea.js",
            "line": 86,
            "description": "Placeholder attribute of input. Shown when input is empty.",
            "itemtype": "property",
            "name": "placeholder",
            "type": "string",
            "default": "null",
            "class": "textarea"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ..\\lib\\src\\containers\\editable-container.js:306"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ..\\lib\\src\\element\\editable-element.js:350"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\lib\\src\\element\\editable-element.js:366"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\lib\\src\\element\\editable-element.js:388"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\lib\\src\\element\\editable-element.js:409"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\lib\\src\\inputs\\abstract.js:51"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\lib\\src\\inputs\\abstract.js:62"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\lib\\src\\inputs\\abstract.js:73"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " ..\\lib\\src\\inputs\\abstract.js:84"
        },
        {
            "message": "Missing item type\nEditable Inline \n---------------------",
            "line": " ..\\lib\\src\\containers\\editable-inline.js:1"
        },
        {
            "message": "Missing item type\nEditable Popover \n---------------------\nrequires bootstrap-popover.js",
            "line": " ..\\lib\\src\\containers\\editable-popover.js:1"
        },
        {
            "message": "Missing item type\nmove popover to new position. This function mainly copied from bootstrap-popover.",
            "line": " ..\\lib\\src\\containers\\editable-popover.js:27"
        },
        {
            "message": "Missing item type\nEditable Poshytip \n---------------------\nrequires jquery.poshytip.js",
            "line": " ..\\lib\\src\\containers\\editable-poshytip.js:1"
        },
        {
            "message": "Missing item type\nPoshytip fix: disable incorrect table display\nsee https://github.com/vadikom/poshytip/issues/7",
            "line": " ..\\lib\\src\\containers\\editable-poshytip.js:82"
        },
        {
            "message": "Missing item type\nEditable jQuery UI Tooltip \n---------------------\nrequires jquery ui 1.9.x",
            "line": " ..\\lib\\src\\containers\\editable-tooltip.js:1"
        },
        {
            "message": "Missing item type\nEditableForm utilites",
            "line": " ..\\lib\\src\\editable-form\\editable-form-utils.js:1"
        },
        {
            "message": "Missing item type\nclassic JS inheritance function",
            "line": " ..\\lib\\src\\editable-form\\editable-form-utils.js:7"
        },
        {
            "message": "Missing item type\nset caret position in input\nsee http://stackoverflow.com/questions/499126/jquery-set-cursor-position-in-text-area",
            "line": " ..\\lib\\src\\editable-form\\editable-form-utils.js:18"
        },
        {
            "message": "Missing item type\nfunction to parse JSON in *single* quotes. (jquery automatically parse only double quotes)\nThat allows such code as: <a data-source=\"{'a': 'b', 'c': 'd'}\">\nsafe = true --> means no exception will be thrown\nfor details see http://stackoverflow.com/questions/7410348/how-to-set-json-format-to-html5-data-attributes-in-the-jquery",
            "line": " ..\\lib\\src\\editable-form\\editable-form-utils.js:34"
        },
        {
            "message": "Missing item type\nslice object by specified keys",
            "line": " ..\\lib\\src\\editable-form\\editable-form-utils.js:59"
        },
        {
            "message": "Missing item type\nexclude complex objects from $.data() before pass to config",
            "line": " ..\\lib\\src\\editable-form\\editable-form-utils.js:91"
        },
        {
            "message": "Missing item type\nmethod to escape html.",
            "line": " ..\\lib\\src\\editable-form\\editable-form-utils.js:122"
        },
        {
            "message": "Missing item type\nmethod to escape html.",
            "line": " ..\\lib\\src\\inputs\\abstract.js:134"
        },
        {
            "message": "Missing item type\nattach handler to automatically submit form when value changed (useful when buttons not shown)",
            "line": " ..\\lib\\src\\inputs\\abstract.js:141"
        },
        {
            "message": "Missing item type\nconvert data to array suitable for sourceData, e.g. [{value: 1, text: 'abc'}, {...}]",
            "line": " ..\\lib\\src\\inputs\\list.js:201"
        }
    ]
}