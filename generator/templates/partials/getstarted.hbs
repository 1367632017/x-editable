<ol>
<li>Decide which core library you want to use: 
<ul>
<li><strong>Bootstrap</strong></li>
<li><strong>jQuery UI</strong></li>
<li><strong>only jQuery (+ Poshytip)</strong></li>
</ul>
<br>
<p>Include it on your page. Examples below are for <i>bootstrap</i>:</p> 
{{#source}}
<link href="path/to/bootstrap/css/bootstrap.css" rel="stylesheet">
<script src="path/to/bootstrap/js/bootstrap.js"></script>           
{{/source}}
</li>
<li>Download corresponding X-editable build<br><br></li>
<li>Include <strong>popup</strong> or <strong>inline</strong> version of X-editable (css equal for both):<br>
popup
{{#source}}
<link href="bootstrap-editable/css/bootstrap-editable.css" rel="stylesheet">
<script src="bootstrap-editable/js/bootstrap-editable.js"></script> 
{{/source}}
inline
{{#source}}
<link href="bootstrap-editable/css/bootstrap-editable.css" rel="stylesheet">
<script src="bootstrap-editable/js/bootstrap-editable-inline.js"></script>           
{{/source}}
</li>
<li>Markup elements that should be editable. Usually it is <code>&lt;A&gt;</code> element with additional <code>data-*</code> attributes
{{#source}}                                                                                                            
<a href="#" id="username" data-type="text" data-pk="1" data-url="/post" data-original-title="Enter username">superuser</a>
{{/source}}
Main attributes you should define are:
<ul>
<li><code>type</code> - type of input (text, textarea, select, etc)</li>
<li><code>url</code> - url to server-side script to process submitted value (<code>/post</code>, <code>post.php</code> etc)</li>
<li><code>pk</code> - primary key of record to be updated (ID of user in db)</li>
<li><code>name</code> - fieldname to be updated (column in db). Can be taken from html <code>id</code> attribute</li>
</ul>
<br>
</li>
<li>Apply <strong>editable()</strong> method to these elements
{{#source}}
$('#username').editable();
{{/source}}                                               
Alternatively, you can set all options via javascript
{{#source}}
<a href="#" id="username">superuser</a>   
{{/source}}
{{#source}}
$('#username').editable({
    type: 'text',
    pk: 1,
    url: '/post',
    title: 'Enter username'
});
{{/source}}                                                          
</li>
<li>That's it!<br>
Open your page and click on element. Enter new value and submit form. It will send ajax request with new value on <code>/post</code>.<br>
<strong>Request</strong> contains <code>name</code>, <code>value</code> and <code>pk</code> of record:<br><br>
{{#source}}
POST /post
{
    name:  'username',  //name of field (column in db)
    pk:    1            //primary key (record id)
    value: 'superuser!' //new value
}
{{/source}}
This library has nothing to do with server-side part: you can write it on any language you prefer. The main is response.<br>
If server <strong>response status is 200 OK</strong> - element will be updated in with new value. No response body required.<br>
If <strong>status != 200</strong> form remains open and <i>responseText</i> is shown as error message.<br>
Default request method is <strong>POST</strong>, you can change it via <i>ajaxOptions</i> config.<br>
For more complex iteraction with server you may use <code>success</code> callback option (e.g. to process json response).<br><br>
</li>
<!--
<li>* You may use <strong>editableContainer()</strong> method if you need stand-alone container with form (but not element that stores value).<br>
Container is attached to element only for <strong>positioning</strong>. You can show/hide it manually, set value via options and subscribe to events (save/cancel).
</li>
-->
</ol>